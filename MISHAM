RANDOM ID GENERATOR:

<script>

let randomString=(length, chars)=>{
    var result = '';
    for (var i = length; i > 0; --i) 
    result += chars[Math.floor(Math.random() * chars.length)];
    return result;
    
}
var rString = randomString(18, '0123456789abcdefghijklmnopqrstuvwxyz');
console.log(rString)

</script>

RANDOM ID GENERATOR: METHOD 2

<script>

let randomString=(length, chars)=>{
    var mask = '';
    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (chars.indexOf('#') > -1) mask += '0123456789';
    if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:";\'<>?,./|\\';
    var result = '';
    for (var i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];
    return result;
}

console.log(randomString(16, 'aA'));
console.log(randomString(32, '#aA'));
console.log(randomString(64, '#A!'));

</script>

ANIMATION CSS HOVE UPWARDS:

 .anim{
    opacity: 0;
    transform: translateY(30px);
    animation: moveup 0.5s linear forwards;
 }
 @keyframes moveup{
    100%{
        opacity: 1;
    transform: translateY(0px);
    }
 }


NAME ANIMATION: CSS

<span class:"hello">MISHAM</span>

.hello{
  font-size: 100px;
  line-height: 160px;
 margin-left: 50px;
  color: transparent;
  background: url(back.png);
  -webkit-text-stroke: 1px rgb(252, 252, 252);
  -webkit-background-clip: text;
  background-position: 0 0;
  animation: back 20s linear infinite;
}
@keyframes back{
  100%{
    background-position: 2000px 0;
  }
}


TOGGLE BUTTON:

.small-sidebar{
    width: 5%;
}
.small-sidebar a p{
    display: none;
   
}
.small-sidebar h3{
    display: none;
    
}
.small-sidebar hr{
    width: 50%;
    margin-bottom: 25px;
    
    
 var menuIcon= document.querySelector(".menu");
var sidebar= document.querySelector(".sidebar");

menuIcon.onclick=function(){
    sidebar.classList.toggle("small-sidebar")
}

Class:menu=>toggle image class name.
Class:sidebar=>class name of sidebar


NPM SCROLL TO TOP PACKAGE:

npm i react-scroll-to-top

import ScrollToTop from "react-scroll-to-top";

 <ScrollToTop smooth />
 
 
 
 TOAST:
 
 npm i react-toastify
 
  import React from 'react';

  import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';
  
  function App(){
    const notify = () => toast("Wow so easy!");

    return (
      <div>
        <button onClick={notify}>Notify!</button>
        <ToastContainer />
      </div>
    );
  }
  
  function GeeksforGeeks(){
    const notify = ()=>{
        toast('Hello Geeks 4',
           {position: toast.POSITION.BOTTOM_LEFT})
        toast('Hello Geeks 6',
           {position: toast.POSITION.BOTTOM_RIGHT})
        toast('Hello Geeks 5',
           {position: toast.POSITION.BOTTOM_CENTER})
        toast('Hello Geeks 1',
           {position: toast.POSITION.TOP_LEFT})
        toast('Hello Geeks 3',
           {position: toast.POSITION.TOP_RIGHT})
        toast('Hello Geeks 2',
           {position: toast.POSITION.TOP_CENTER})
    }
    
    
    function GeeksforGeeks(){
    const notify = ()=>{
        // inbuilt-notification
        toast.warning('Danger')
        // inbuilt-notification
        toast.success('successful')
        // inbuilt-notification
        toast.info('GeeksForGeeks')
        // inbuilt-notification
        toast.error('Runtime error')
        // default notification
        toast('Hello Geeks')
          
    }
    
    
    function GeeksforGeeks(){
    const notify = ()=>{
        // Set to 10sec
        toast.warning('Danger', {autoClose:10000})
        // Set to 3sec
        toast.success('successful', {autoClose:3000})
        // User have to close it
        toast.info('GeeksForGeeks', {autoClose:false})
        toast.error('Runtime error', {
         // Set to 15sec
         position: toast.POSITION.BOTTOM_LEFT, autoClose:15000})
        toast('Hello Geeks')// Default
          
    }
<ToastContainer
position="bottom-center"
theme='colored'
autoClose={5000}
hideProgressBar={false}
newestOnTop={false}
closeOnClick
rtl={false}
pauseOnFocusLoss
draggable
pauseOnHover
/>
 toast.warning('success')


CONTACT US REALTIME MAIL:

//npm i emailjs-com

import React, { useRef } from 'react';
import emailjs from 'emailjs-com';

export const ContactUs = () => {
  const form = useRef();

  const sendEmail = (e) => {
    e.preventDefault();

    emailjs.sendForm('service_1colpnl', 'template_df18idg', form.current, 'acpm4z5WNg5AxfetO')
      .then((result) => {
          console.log(result.text);
      }, (error) => {
          console.log(error.text);
      });
      e.target.reset()
  };

  return (
    <form ref={form} onSubmit={sendEmail}>
      <label>Name</label>
      <input type="text" name="name" />
      <label>Email</label>
      <input type="email" name="email" />
      <label>Phone</label>
      <input type="phone" name="phone" />
      <label>Message</label>
      <textarea name="message" />
      <input type="submit" value="Send" />
    </form>
  );
};


PAGINATION:

APP.JS

import React, { useState, useEffect } from 'react';
import './App.css';
import Post from './Post';
import Pagination from './Pagination';
import axios from 'axios';
import "bootstrap/dist/css/bootstrap.min.css"





const App = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(25);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');
      setPosts(res.data);
      console.log(res.data)
      setLoading(false);
    };

    fetchPosts();
  }, []);

  // Get current posts
  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);

  // Change page
  const paginate = pageNumber => setCurrentPage(pageNumber);

  return (
    <div className='container mt-5'>
      <h1 className='text-primary mb-3'>My Blog</h1>
      <Post posts={currentPosts} loading={loading} />
      <Pagination
        postsPerPage={postsPerPage}
        totalPosts={posts.length}
        paginate={paginate}
      />
    </div>
  );
};

export default App;

PAGINATION.JSX

import React from 'react';
import "bootstrap/dist/css/bootstrap.min.css"



const Pagination = ({ postsPerPage, totalPosts, paginate }) => {
  const pageNumbers = [];

  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <nav>
      <ul className='pagination'>
        {pageNumbers.map(number => (
          <li key={number} className='page-item'>
            <a onClick={() => paginate(number)} href='!#' className='page-link'>
              {number}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Pagination;


POSTS.JSX

import React from 'react';
import "bootstrap/dist/css/bootstrap.min.css"

const Posts = ({ posts, loading }) => {
  if (loading) {
    return <h2>Loading...</h2>;
  }

  return (
    <ul className='list-group mb-4'>
      {posts.map(post => (
        <li key={post.id} className='list-group-item'>
         {post.body}
        
        </li>
        
      ))}
    </ul>
  );
};

export default Posts;


CHECK DUPLICATES IN ARRAY OF OBJECTS:

const values =[]
 
 const uniqueValues = new Set(values.map(v => v.id));
 
 if (uniqueValues.size < values.length) {
   console.log('duplicates found')}
   else {console.log("no duplicates")
 }



NODE.JS CONNECT TO MONGODB:

const mongodb=require("mongodb")
const mongoClient=mongodb.MongoClient


app.get("/home",async(req,res)=>{
   try {
    const connection=await mongoClient.connect("mongodb://localhost:27017");
    const db=connection.db("dashboarddb");
   let response= await db.collection("users").find().toArray()
    await connection.close();
    res.status(200).json(response)

   } catch (error) {
    res.status(500).json({message:"error"})
   }
})



FUNCTION FOR CLEAR INPUTBOX AFTER CLICK SUBMIT:

let input=document.getElementById("input");
let btn=document.getElementById("btn");

btn.addEventListener("click",()=>{
    input.foreach(input=>input.value="")
})


CSS BOUNCE STYLE:

h6{
    color: #fff;
    background:linear-gradient(135deg,#ff590f,#ff27a4);
    padding: 10px 15px;
    border-radius: 10px;
    box-shadow: 0 5px 10px rgb(0,0, 0, 0.25);
    animation: bounce 0.5s cubic-bezier(0.8,0,1,1) infinite alternate; 
}

@keyframes bounce{
    100%{
        margin-top:30px;
    }
}

img{
    width: 30px;
    padding: 5px; 
}


RADIO BUTTON VALUE:

function displaySelectedOption(){
var radios = document.getElementsByName('option');
    for (var radio of radios)
    {
        if (radio.checked) 
        {
        document.getElementById("selectedOption").innerHTML=radio.value;
        }
    }
}
displaySelectedOption();

OPTION VALUE:

function getSelectedOption(){
 document.getElementById("selectedOption").innerHTML=
 document.getElementsByTagName("select")[0].value;
}
getSelectedOption();

