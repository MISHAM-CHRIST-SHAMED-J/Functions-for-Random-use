RANDOM ID GENERATOR:

<script>

let randomString=(length, chars)=>{
    var result = '';
    for (var i = length; i > 0; --i) 
    result += chars[Math.floor(Math.random() * chars.length)];
    return result;
    
}
var rString = randomString(18, '0123456789abcdefghijklmnopqrstuvwxyz');
console.log(rString)

</script>

RANDOM ID GENERATOR: METHOD 2

<script>

let randomString=(length, chars)=>{
    var mask = '';
    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (chars.indexOf('#') > -1) mask += '0123456789';
    if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:";\'<>?,./|\\';
    var result = '';
    for (var i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];
    return result;
}

console.log(randomString(16, 'aA'));
console.log(randomString(32, '#aA'));
console.log(randomString(64, '#A!'));

</script>

ANIMATION CSS HOVE UPWARDS:

 .anim{
    opacity: 0;
    transform: translateY(30px);
    animation: moveup 0.5s linear forwards;
 }
 @keyframes moveup{
    100%{
        opacity: 1;
    transform: translateY(0px);
    }
 }


NAME ANIMATION: CSS

<span class:"hello">MISHAM</span>

.hello{
  font-size: 100px;
  line-height: 160px;
 margin-left: 50px;
  color: transparent;
  background: url(back.png);
  -webkit-text-stroke: 1px rgb(252, 252, 252);
  -webkit-background-clip: text;
  background-position: 0 0;
  animation: back 20s linear infinite;
}
@keyframes back{
  100%{
    background-position: 2000px 0;
  }
}


TOGGLE BUTTON:

.small-sidebar{
    width: 5%;
}
.small-sidebar a p{
    display: none;
   
}
.small-sidebar h3{
    display: none;
    
}
.small-sidebar hr{
    width: 50%;
    margin-bottom: 25px;
    
    
 var menuIcon= document.querySelector(".menu");
var sidebar= document.querySelector(".sidebar");

menuIcon.onclick=function(){
    sidebar.classList.toggle("small-sidebar")
}

Class:menu=>toggle image class name.
Class:sidebar=>class name of sidebar


NPM SCROLL TO TOP PACKAGE:

npm i react-scroll-to-top

import ScrollToTop from "react-scroll-to-top";

 <ScrollToTop smooth />
 
 
 
 TOAST:
 
 npm i react-toastify
 
  import React from 'react';

  import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';
  
  function App(){
    const notify = () => toast("Wow so easy!");

    return (
      <div>
        <button onClick={notify}>Notify!</button>
        <ToastContainer />
      </div>
    );
  }
  
  function GeeksforGeeks(){
    const notify = ()=>{
        toast('Hello Geeks 4',
           {position: toast.POSITION.BOTTOM_LEFT})
        toast('Hello Geeks 6',
           {position: toast.POSITION.BOTTOM_RIGHT})
        toast('Hello Geeks 5',
           {position: toast.POSITION.BOTTOM_CENTER})
        toast('Hello Geeks 1',
           {position: toast.POSITION.TOP_LEFT})
        toast('Hello Geeks 3',
           {position: toast.POSITION.TOP_RIGHT})
        toast('Hello Geeks 2',
           {position: toast.POSITION.TOP_CENTER})
    }
    
    
    function GeeksforGeeks(){
    const notify = ()=>{
        // inbuilt-notification
        toast.warning('Danger')
        // inbuilt-notification
        toast.success('successful')
        // inbuilt-notification
        toast.info('GeeksForGeeks')
        // inbuilt-notification
        toast.error('Runtime error')
        // default notification
        toast('Hello Geeks')
          
    }
    
    
    function GeeksforGeeks(){
    const notify = ()=>{
        // Set to 10sec
        toast.warning('Danger', {autoClose:10000})
        // Set to 3sec
        toast.success('successful', {autoClose:3000})
        // User have to close it
        toast.info('GeeksForGeeks', {autoClose:false})
        toast.error('Runtime error', {
         // Set to 15sec
         position: toast.POSITION.BOTTOM_LEFT, autoClose:15000})
        toast('Hello Geeks')// Default
          
    }
<ToastContainer
position="bottom-center"
theme='colored'
autoClose={5000}
hideProgressBar={false}
newestOnTop={false}
closeOnClick
rtl={false}
pauseOnFocusLoss
draggable
pauseOnHover
/>
 toast.warning('success')
